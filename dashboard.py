import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import numpy as np
from fpdf import FPDF
import base64
import tempfile
import os
import io
from PIL import Image
import subprocess
import sys

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Financeiro Profissional",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .section-header {
        font-size: 1.5rem;
        color: #2c3e50;
        border-left: 5px solid #3498db;
        padding-left: 1rem;
        margin: 2rem 0 1rem 0;
    }
    .advanced-kpi {
        background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .alert-critical {
        background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .alert-warning {
        background: linear-gradient(135deg, #f7971e 0%, #ffd200 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .alert-success {
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Verificar e instalar kaleido silenciosamente
def verificar_e_instalar_kaleido():
    try:
        import kaleido
        return True
    except ImportError:
        try:
            # Instala√ß√£o silenciosa do kaleido
            subprocess.check_call([sys.executable, "-m", "pip", "install", "kaleido", "--quiet"], 
                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            # Verificar se a instala√ß√£o foi bem-sucedida
            import kaleido
            return True
        except:
            return False

# Verificar/instalar kaleido automaticamente (sem mostrar mensagens para o usu√°rio)
KALEIDO_DISPONIVEL = verificar_e_instalar_kaleido()

class PDFReport(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'RELATORIO FINANCEIRO - DASHBOARD', 0, 1, 'C')
        self.set_font('Arial', 'I', 12)
        self.cell(0, 10, f'Gerado em: {datetime.now().strftime("%d/%m/%Y %H:%M")}', 0, 1, 'C')
        self.ln(10)
    
    def chapter_title(self, title):
        self.set_font('Arial', 'B', 14)
        self.set_fill_color(200, 220, 255)
        self.cell(0, 10, title, 0, 1, 'L', 1)
        self.ln(5)
    
    def chapter_body(self, body):
        self.set_font('Arial', '', 12)
        self.multi_cell(0, 8, body)
        self.ln()
    
    def add_company_info(self, company_name):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, company_name, 0, 1, 'C')
        self.ln(5)

def validar_estrutura_dados(df):
    """Valida se o DataFrame tem a estrutura esperada"""
    colunas_obrigatorias = ['Data', 'Categoria', 'Subcategoria', 'Tipo', 'Valor']
    colunas_faltantes = [col for col in colunas_obrigatorias if col not in df.columns]
    
    if colunas_faltantes:
        raise ValueError(f"Colunas obrigat√≥rias faltantes: {colunas_faltantes}")
    
    # Validar tipos de dados
    if 'Valor' in df.columns:
        if df['Valor'].dtype not in ['float64', 'int64']:
            try:
                df['Valor'] = pd.to_numeric(df['Valor'], errors='coerce')
            except:
                raise ValueError("Coluna 'Valor' deve conter n√∫meros")
    
    # Validar valores negativos
    if (df['Valor'] < 0).any():
        st.warning("‚ö†Ô∏è Foram encontrados valores negativos na coluna 'Valor'. Certifique-se de que os dados est√£o consistentes.")
    
    return True

@st.cache_data
def carregar_dados(uploaded_file):
    """Carrega e prepara os dados do CSV com cache"""
    df = pd.read_csv(uploaded_file)
    
    # Validar estrutura dos dados
    validar_estrutura_dados(df)
    
    # Converter coluna Data
    if 'Data' in df.columns:
        df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
        df = df.dropna(subset=['Data'])
    
    # Criar colunas auxiliares
    df['M√™s'] = df['Data'].dt.to_period('M').astype(str)
    df['Ano'] = df['Data'].dt.year
    
    # Traduzir dias da semana para portugu√™s
    dias_traduzidos = {
        'Monday': 'Segunda-feira',
        'Tuesday': 'Ter√ßa-feira', 
        'Wednesday': 'Quarta-feira',
        'Thursday': 'Quinta-feira',
        'Friday': 'Sexta-feira',
        'Saturday': 'S√°bado',
        'Sunday': 'Domingo'
    }
    df['Dia da Semana'] = df['Data'].dt.day_name().map(dias_traduzidos)
    
    return df

@st.cache_data
def calcular_kpis_basicos(df):
    """Calcula todos os KPIs financeiros b√°sicos com cache"""
    if df.empty:
        return {}
    
    # KPIs b√°sicos
    total_receitas = df[df['Tipo'] == 'Receita']['Valor'].sum()
    total_despesas = df[df['Tipo'] == 'Despesa']['Valor'].sum()
    saldo_liquido = total_receitas - total_despesas
    margem_liquida = (saldo_liquido / total_receitas * 100) if total_receitas > 0 else 0
    
    # KPIs avan√ßados
    num_transacoes = len(df)
    num_receitas = len(df[df['Tipo'] == 'Receita'])
    ticket_medio = total_receitas / num_receitas if num_receitas > 0 else 0
    
    # An√°lise de subcategorias
    top_subcategorias_receita = df[df['Tipo'] == 'Receita'].groupby('Subcategoria')['Valor'].sum().nlargest(10)
    top_subcategorias_despesa = df[df['Tipo'] == 'Despesa'].groupby('Subcategoria')['Valor'].sum().nlargest(10)
    
    # An√°lise de todas as subcategorias para os gr√°ficos de pizza
    receitas_por_subcategoria = df[df['Tipo'] == 'Receita'].groupby('Subcategoria')['Valor'].sum()
    despesas_por_subcategoria = df[df['Tipo'] == 'Despesa'].groupby('Subcategoria')['Valor'].sum()
    
    return {
        'total_receitas': total_receitas,
        'total_despesas': total_despesas,
        'saldo_liquido': saldo_liquido,
        'margem_liquida': margem_liquida,
        'num_transacoes': num_transacoes,
        'ticket_medio': ticket_medio,
        'top_subcategorias_receita': top_subcategorias_receita,
        'top_subcategorias_despesa': top_subcategorias_despesa,
        'receitas_por_subcategoria': receitas_por_subcategoria,
        'despesas_por_subcategoria': despesas_por_subcategoria
    }

def calcular_kpis_avancados_melhorado(df, kpis_basicos):
    """Calcula KPIs financeiros avan√ßados com dados mais realistas"""
    total_receitas = kpis_basicos['total_receitas']
    total_despesas = kpis_basicos['total_despesas']
    saldo_liquido = kpis_basicos['saldo_liquido']
    
    # Calcular margem de contribui√ß√£o real
    custos_variaveis = total_despesas * 0.7  # Estimativa de 70% como custos vari√°veis
    margem_contribuicao = (total_receitas - custos_variaveis) / total_receitas if total_receitas > 0 else 0
    
    # ROI baseado em investimento m√©dio
    investimento_medio = total_receitas * 0.2  # Ajuste mais realista (20% das receitas)
    roi = (saldo_liquido / investimento_medio * 100) if investimento_medio > 0 else 0
    
    # Ponto de equil√≠brio mais preciso
    custos_fixos = total_despesas * 0.4  # Estimativa de 40% como custos fixos
    ponto_equilibrio = custos_fixos / margem_contribuicao if margem_contribuicao > 0 else 0
    
    # Ciclo de Convers√£o de Caixa baseado em an√°lise real dos dados
    if 'Data' in df.columns:
        # Calcular prazos m√©dios baseados nas datas
        dias_entre_transacoes = df.sort_values('Data')['Data'].diff().dt.days.mean()
        ciclo_conversao_caixa = min(max(int(dias_entre_transacoes or 45), 30), 90)
    else:
        ciclo_conversao_caixa = 45  # Valor padr√£o
    
    return {
        'roi': roi,
        'ponto_equilibrio': ponto_equilibrio,
        'fluxo_caixa_operacional': saldo_liquido,
        'ciclo_conversao_caixa': ciclo_conversao_caixa,
        'margem_contribuicao': margem_contribuicao * 100
    }

def analisar_tendencias(df):
    """Analisa tend√™ncias nos dados financeiros"""
    if len(df) < 2:
        return {}
    
    # Agrupar por m√™s para an√°lise de tend√™ncia
    df_mensal = df.groupby(['Ano', 'M√™s']).agg({
        'Valor': 'sum',
        'Tipo': lambda x: (x == 'Receita').sum()
    }).reset_index()
    
    # Calcular crescimento mensal
    if len(df_mensal) > 1:
        df_mensal['Crescimento'] = df_mensal['Valor'].pct_change() * 100
        crescimento_medio = df_mensal['Crescimento'].mean()
        ultimo_crescimento = df_mensal['Crescimento'].iloc[-1] if len(df_mensal) > 1 else 0
    else:
        crescimento_medio = 0
        ultimo_crescimento = 0
    
    # An√°lise de sazonalidade por dia da semana
    if 'Dia da Semana' in df.columns:
        sazonalidade = df.groupby('Dia da Semana')['Valor'].mean()
        dia_maior_movimento = sazonalidade.idxmax() if not sazonalidade.empty else "N/A"
    else:
        dia_maior_movimento = "N/A"
    
    return {
        'crescimento_medio': crescimento_medio,
        'ultimo_crescimento': ultimo_crescimento,
        'tendencia_positiva': ultimo_crescimento > 0,
        'dia_maior_movimento': dia_maior_movimento,
        'num_meses_analisados': len(df_mensal)
    }

def gerar_alertas(kpis_basicos, kpis_avancados, tendencias):
    """Gera alertas baseados nos KPIs"""
    alertas = []
    
    # Alertas cr√≠ticos
    if kpis_basicos['saldo_liquido'] < 0:
        alertas.append({
            "tipo": "critical",
            "mensagem": "‚ùå **ALERTA CR√çTICO**: Saldo l√≠quido negativo! Reveja urgentemente suas despesas.",
            "mensagem_sem_emoji": "ALERTA CR√çTICO: Saldo l√≠quido negativo! Reveja urgentemente suas despesas."
        })
    
    if kpis_basicos['margem_liquida'] < 5:
        alertas.append({
            "tipo": "critical", 
            "mensagem": "‚ö†Ô∏è **ALERTA**: Margem l√≠quida abaixo de 5% - Risco financeiro alto",
            "mensagem_sem_emoji": "ALERTA: Margem l√≠quida abaixo de 5% - Risco financeiro alto"
        })
    
    # Alertas de aten√ß√£o
    if kpis_basicos['margem_liquida'] < 10:
        alertas.append({
            "tipo": "warning",
            "mensagem": "üìâ **ATEN√á√ÉO**: Margem l√≠quida abaixo de 10% - Considere otimizar custos",
            "mensagem_sem_emoji": "ATENCAO: Margem l√≠quida abaixo de 10% - Considere otimizar custos"
        })
    
    if kpis_avancados['roi'] < 15:
        alertas.append({
            "tipo": "warning",
            "mensagem": "üìä **OPORTUNIDADE**: ROI abaixo de 15% - Avalie novos investimentos",
            "mensagem_sem_emoji": "OPORTUNIDADE: ROI abaixo de 15% - Avalie novos investimentos"
        })
    
    if kpis_avancados['ciclo_conversao_caixa'] > 60:
        alertas.append({
            "tipo": "warning",
            "mensagem": "‚è≥ **ALERTA**: Ciclo de convers√£o de caixa muito longo (>60 dias)",
            "mensagem_sem_emoji": "ALERTA: Ciclo de convers√£o de caixa muito longo (>60 dias)"
        })
    
    # Alertas positivos
    if kpis_basicos['margem_liquida'] > 20:
        alertas.append({
            "tipo": "success",
            "mensagem": "üéâ **EXCELENTE**: Margem l√≠quida acima de 20% - Performance destacada!",
            "mensagem_sem_emoji": "EXCELENTE: Margem l√≠quida acima de 20% - Performance destacada!"
        })
    
    if kpis_avancados['roi'] > 25:
        alertas.append({
            "tipo": "success", 
            "mensagem": "üöÄ **DESTAQUE**: ROI acima de 25% - Retorno excepcional!",
            "mensagem_sem_emoji": "DESTAQUE: ROI acima de 25% - Retorno excepcional!"
        })
    
    if tendencias.get('tendencia_positiva', False):
        alertas.append({
            "tipo": "success",
            "mensagem": "üìà **CRESCIMENTO**: Tend√™ncia positiva identificada nos √∫ltimos per√≠odos",
            "mensagem_sem_emoji": "CRESCIMENTO: Tend√™ncia positiva identificada nos √∫ltimos per√≠odos"
        })
    
    return alertas if alertas else [{
        "tipo": "success",
        "mensagem": "‚úÖ **TUDO OK**: Todos os indicadores dentro das metas esperadas",
        "mensagem_sem_emoji": "TUDO OK: Todos os indicadores dentro das metas esperadas"
    }]

def criar_grafico_topo_subcategorias(kpis_basicos, temp_dir):
    """Cria gr√°ficos de top subcategorias e retorna os caminhos das imagens"""
    imagens = {}
    
    try:
        # Gr√°fico de top receitas - otimizado para PDF
        if not kpis_basicos['top_subcategorias_receita'].empty:
            # Limitar para 5 categorias para melhor visualiza√ß√£o
            top_receitas_data = kpis_basicos['top_subcategorias_receita'].nlargest(5).reset_index()
            
            fig_receitas = px.bar(
                top_receitas_data,
                x='Valor',
                y='Subcategoria',
                orientation='h',
                color='Valor',
                color_continuous_scale='Viridis',
                title='Top 5 - Principais Fontes de Receita'
            )
            
            # Configura√ß√µes otimizadas para PDF
            fig_receitas.update_layout(
                height=350,  # Altura aumentada para caber legendas
                width=600,   # Largura fixa
                showlegend=False,
                margin=dict(l=120, r=20, t=50, b=50),  # Margem esquerda maior para labels
                font=dict(size=10)  # Fonte menor
            )
            fig_receitas.update_xaxes(title_text="Valor (R$)", title_font=dict(size=10))
            fig_receitas.update_yaxes(title_text="", tickfont=dict(size=9))
            
            # Salvar como imagem
            img_path_receitas = os.path.join(temp_dir, "top_receitas.png")
            fig_receitas.write_image(img_path_receitas, width=600, height=350, scale=1)
            imagens['top_receitas'] = img_path_receitas
        
        # Gr√°fico de top despesas - otimizado para PDF
        if not kpis_basicos['top_subcategorias_despesa'].empty:
            # Limitar para 5 categorias para melhor visualiza√ß√£o
            top_despesas_data = kpis_basicos['top_subcategorias_despesa'].nlargest(5).reset_index()
            
            fig_despesas = px.bar(
                top_despesas_data,
                x='Valor',
                y='Subcategoria',
                orientation='h',
                color='Valor',
                color_continuous_scale='Reds',
                title='Top 5 - Maiores Gastos'
            )
            
            # Configura√ß√µes otimizadas para PDF
            fig_despesas.update_layout(
                height=350,  # Altura aumentada para caber legendas
                width=600,   # Largura fixa
                showlegend=False,
                margin=dict(l=120, r=20, t=50, b=50),  # Margem esquerda maior para labels
                font=dict(size=10)  # Fonte menor
            )
            fig_despesas.update_xaxes(title_text="Valor (R$)", title_font=dict(size=10))
            fig_despesas.update_yaxes(title_text="", tickfont=dict(size=9))
            
            # Salvar como imagem
            img_path_despesas = os.path.join(temp_dir, "top_despesas.png")
            fig_despesas.write_image(img_path_despesas, width=600, height=350, scale=1)
            imagens['top_despesas'] = img_path_despesas
        
        # Gr√°fico de distribui√ß√£o por subcategoria - CORRIGIDO para cores
        if not kpis_basicos['receitas_por_subcategoria'].empty:
            top_receitas = kpis_basicos['receitas_por_subcategoria'].nlargest(5)
            fig_pie_receitas = px.pie(
                top_receitas.reset_index(),
                values='Valor',
                names='Subcategoria',
                title='Distribui√ß√£o de Receitas (Top 5)',
                color_discrete_sequence=px.colors.qualitative.Set3  # Paleta de cores espec√≠fica
            )
            
            # Configura√ß√µes otimizadas para PDF
            fig_pie_receitas.update_layout(
                height=400,
                width=500,
                margin=dict(l=20, r=20, t=50, b=20),
                font=dict(size=10),
                showlegend=True,
                legend=dict(
                    font=dict(size=9),
                    orientation="v",
                    yanchor="middle",
                    y=0.5,
                    xanchor="right",
                    x=1.3
                )
            )
            
            # Atualizar o tra√ßo (bordas) das fatias
            fig_pie_receitas.update_traces(
                textposition='inside',
                textinfo='percent+label',
                insidetextorientation='radial',
                marker=dict(line=dict(color='white', width=1))
            )
            
            img_path_pie_receitas = os.path.join(temp_dir, "pie_receitas.png")
            fig_pie_receitas.write_image(img_path_pie_receitas, width=500, height=400, scale=1)
            imagens['pie_receitas'] = img_path_pie_receitas
        
        if not kpis_basicos['despesas_por_subcategoria'].empty:
            top_despesas = kpis_basicos['despesas_por_subcategoria'].nlargest(5)
            fig_pie_despesas = px.pie(
                top_despesas.reset_index(),
                values='Valor',
                names='Subcategoria',
                title='Distribui√ß√£o de Despesas (Top 5)',
                color_discrete_sequence=px.colors.qualitative.Pastel  # Paleta de cores diferente
            )
            
            # Configura√ß√µes otimizadas para PDF
            fig_pie_despesas.update_layout(
                height=400,
                width=500,
                margin=dict(l=20, r=20, t=50, b=20),
                font=dict(size=10),
                showlegend=True,
                legend=dict(
                    font=dict(size=9),
                    orientation="v",
                    yanchor="middle",
                    y=0.5,
                    xanchor="right",
                    x=1.3
                )
            )
            
            # Atualizar o tra√ßo (bordas) das fatias
            fig_pie_despesas.update_traces(
                textposition='inside',
                textinfo='percent+label',
                insidetextorientation='radial',
                marker=dict(line=dict(color='white', width=1))
            )
            
            img_path_pie_despesas = os.path.join(temp_dir, "pie_despesas.png")
            fig_pie_despesas.write_image(img_path_pie_despesas, width=500, height=400, scale=1)
            imagens['pie_despesas'] = img_path_pie_despesas
            
    except Exception as e:
        # N√£o mostrar erro para o usu√°rio - falha silenciosa
        pass
    
    return imagens

def gerar_relatorio_pdf(df, kpis_basicos, kpis_avancados, tendencias, company_name, temp_dir):
    """Gera relat√≥rio PDF completo"""
    pdf = PDFReport()
    pdf.add_page()
    
    # Capa com nome da empresa
    pdf.set_font('Arial', 'B', 20)
    pdf.cell(0, 40, 'RELATORIO FINANCEIRO - DASHBOARD', 0, 1, 'C')
    pdf.add_company_info(company_name)
    pdf.set_font('Arial', 'I', 14)
    pdf.cell(0, 10, 'Dashboard de Fluxo de Caixa', 0, 1, 'C')
    pdf.ln(20)
    
    # Per√≠odo analisado
    if 'Data' in df.columns:
        periodo = f"Periodo: {df['Data'].min().strftime('%d/%m/%Y')} a {df['Data'].max().strftime('%d/%m/%Y')}"
        pdf.set_font('Arial', '', 12)
        pdf.cell(0, 10, periodo, 0, 1, 'C')
    
    pdf.add_page()
    
    # 1. KPIs PRINCIPAIS
    pdf.chapter_title('1. KPIs FINANCEIROS PRINCIPAIS')
    
    kpis_text = f"""
    Receitas Totais: R$ {kpis_basicos['total_receitas']:,.2f}
    Despesas Totais: R$ {kpis_basicos['total_despesas']:,.2f}
    Saldo Liquido: R$ {kpis_basicos['saldo_liquido']:,.2f}
    Margem Liquida: {kpis_basicos['margem_liquida']:.1f}%
    Total de Transacoes: {kpis_basicos['num_transacoes']:,}
    Ticket Medio: R$ {kpis_basicos['ticket_medio']:,.2f}
    """
    pdf.chapter_body(kpis_text)
    
    # 2. KPIs AVAN√áADOS
    pdf.add_page()
    pdf.chapter_title('2. KPIs FINANCEIROS AVANCADOS')
    
    kpis_avancados_text = f"""
    ROI (Return on Investment): {kpis_avancados['roi']:.1f}%
    Ponto de Equilibrio: R$ {kpis_avancados['ponto_equilibrio']:,.2f}
    Fluxo de Caixa Operacional: R$ {kpis_avancados['fluxo_caixa_operacional']:,.2f}
    Ciclo de Conversao de Caixa: {kpis_avancados['ciclo_conversao_caixa']} dias
    Margem de Contribuicao: {kpis_avancados['margem_contribuicao']:.1f}%
    """
    pdf.chapter_body(kpis_avancados_text)
    
    # 3. AN√ÅLISE DE TEND√äNCIAS
    pdf.add_page()
    pdf.chapter_title('3. ANALISE DE TENDENCIAS')
    
    if tendencias:
        # Traduzir o dia da semana se estiver em ingl√™s
        dia_maior_movimento = tendencias.get('dia_maior_movimento', 'N/A')
        dias_traduzidos = {
            'Monday': 'Segunda-feira',
            'Tuesday': 'Ter√ßa-feira', 
            'Wednesday': 'Quarta-feira',
            'Thursday': 'Quinta-feira',
            'Friday': 'Sexta-feira',
            'Saturday': 'S√°bado',
            'Sunday': 'Domingo'
        }
        dia_maior_movimento_traduzido = dias_traduzidos.get(dia_maior_movimento, dia_maior_movimento)
        
        tendencias_text = f"""
        Crescimento Medio Mensal: {tendencias.get('crescimento_medio', 0):.1f}%
        Ultimo Crescimento: {tendencias.get('ultimo_crescimento', 0):.1f}%
        Tendencia Atual: {'POSITIVA' if tendencias.get('tendencia_positiva') else 'NEGATIVA'}
        Dia de Maior Movimento: {dia_maior_movimento_traduzido}
        Meses Analisados: {tendencias.get('num_meses_analisados', 0)}
        """
    else:
        tendencias_text = "Dados insuficientes para analise de tendencias."
    
    pdf.chapter_body(tendencias_text)
    
    # 4. GR√ÅFICOS E VISUALIZA√á√ïES
    if KALEIDO_DISPONIVEL:
        pdf.add_page()
        pdf.chapter_title('4. GRAFICOS E VISUALIZACOES')
        
        # Criar gr√°ficos
        imagens = criar_grafico_topo_subcategorias(kpis_basicos, temp_dir)
        
        # Adicionar gr√°ficos ao PDF com tamanhos otimizados
        if imagens:
            if 'top_receitas' in imagens:
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 10, 'Principais Fontes de Receita:', 0, 1)
                # Gr√°fico menor para caber na p√°gina com legendas
                pdf.image(imagens['top_receitas'], x=10, w=190)
                pdf.ln(10)
            
            if 'top_despesas' in imagens:
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 10, 'Maiores Gastos:', 0, 1)
                pdf.image(imagens['top_despesas'], x=10, w=190)
                pdf.ln(10)
            
            # Nova p√°gina para os gr√°ficos de pizza
            pdf.add_page()
            pdf.chapter_title('4. GRAFICOS E VISUALIZACOES (CONT.)')
            
            if 'pie_receitas' in imagens:
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 10, 'Distribuicao de Receitas:', 0, 1)
                # Gr√°ficos de pizza centralizados e menores
                pdf.image(imagens['pie_receitas'], x=25, w=160)
                pdf.ln(10)
            
            if 'pie_despesas' in imagens:
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 10, 'Distribuicao de Despesas:', 0, 1)
                pdf.image(imagens['pie_despesas'], x=25, w=160)
                pdf.ln(10)
    
    # 5. ALERTAS E RECOMENDA√á√ïES
    pdf.add_page()
    pdf.chapter_title('5. ALERTAS E RECOMENDACOES')
    
    alertas = gerar_alertas(kpis_basicos, kpis_avancados, tendencias)
    alertas_text = "\n".join([alerta["mensagem_sem_emoji"] for alerta in alertas])
    pdf.chapter_body(alertas_text)
    
    # Salvar PDF
    pdf_path = os.path.join(temp_dir, f"relatorio_financeiro_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf")
    pdf.output(pdf_path)
    
    return pdf_path

def criar_link_download_pdf(pdf_path, nome_arquivo):
    """Cria link de download para o PDF"""
    with open(pdf_path, "rb") as f:
        pdf_bytes = f.read()
    
    b64_pdf = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64_pdf}" download="{nome_arquivo}">üìÑ Clique aqui para baixar o PDF</a>'
    return href

def main():
    st.markdown('<h1 class="main-header">üìä DASHBOARD FINANCEIRO PROFISSIONAL</h1>', unsafe_allow_html=True)
    
    # Sidebar - Upload e Filtros
    st.sidebar.header("üìÅ CARREGAR DADOS")
    uploaded_file = st.sidebar.file_uploader(
        "Fa√ßa upload do CSV gerado pelo Consolidador",
        type=['csv'],
        help="Arquivo CSV com colunas: Data, Categoria, Subcategoria, Tipo, Cliente, Valor"
    )
    
    # Solicitar nome da empresa
    st.sidebar.header("üè¢ INFORMACOES DA EMPRESA")
    company_name = st.sidebar.text_input(
        "Nome da Empresa",
        placeholder="Digite o nome da sua empresa",
        help="Este nome ser√° exibido no relat√≥rio PDF"
    )
    
    if uploaded_file is not None:
        try:
            # Carregar dados
            df = carregar_dados(uploaded_file)
            
            # Filtros na sidebar
            st.sidebar.header("üîç FILTROS")
            
            # Filtro por per√≠odo - FORMATO BRASILEIRO
            if 'Data' in df.columns:
                min_date = df['Data'].min().date()
                max_date = df['Data'].max().date()
                
                date_range = st.sidebar.date_input(
                    "Selecione o Per√≠odo de An√°lise",
                    value=(min_date, max_date),
                    min_value=min_date,
                    max_value=max_date,
                    format="DD/MM/YYYY"
                )
                
                if len(date_range) == 2:
                    start_date, end_date = date_range
                    df = df[(df['Data'].dt.date >= start_date) & (df['Data'].dt.date <= end_date)]
            
            # Filtro por tipo
            if 'Tipo' in df.columns:
                tipos = st.sidebar.multiselect(
                    "Tipo de Transa√ß√£o",
                    options=df['Tipo'].unique(),
                    default=df['Tipo'].unique()
                )
                df = df[df['Tipo'].isin(tipos)]
            
            # Filtro por categoria
            if 'Categoria' in df.columns:
                categorias = st.sidebar.multiselect(
                    "Categorias",
                    options=df['Categoria'].unique(),
                    default=df['Categoria'].unique()
                )
                df = df[df['Categoria'].isin(categorias)]
            
            # Filtro por subcategoria
            if 'Subcategoria' in df.columns:
                subcategorias = st.sidebar.multiselect(
                    "Subcategorias",
                    options=df['Subcategoria'].unique(),
                    default=df['Subcategoria'].unique()
                )
                df = df[df['Subcategoria'].isin(subcategorias)]
            
            # Calcular KPIs
            kpis_basicos = calcular_kpis_basicos(df)
            kpis_avancados = calcular_kpis_avancados_melhorado(df, kpis_basicos)
            tendencias = analisar_tendencias(df)
            
            # ========== SECTION 1: KPIs PRINCIPAIS ==========
            st.markdown('<div class="section-header">üìà KPIs FINANCEIROS PRINCIPAIS</div>', unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üí∞ RECEITAS TOTAIS", f"R$ {kpis_basicos['total_receitas']:,.2f}")
            
            with col2:
                st.metric("üí∏ DESPESAS TOTAIS", f"R$ {kpis_basicos['total_despesas']:,.2f}")
            
            with col3:
                st.metric("‚öñÔ∏è SALDO L√çQUIDO", f"R$ {kpis_basicos['saldo_liquido']:,.2f}",
                         delta=f"R$ {kpis_basicos['saldo_liquido']:,.2f}",
                         delta_color="normal" if kpis_basicos['saldo_liquido'] >= 0 else "inverse")
            
            with col4:
                st.metric("üìä MARGEM L√çQUIDA", f"{kpis_basicos['margem_liquida']:.1f}%")
            
            col5, col6 = st.columns(2)
            
            with col5:
                st.metric("üîÑ TRANSA√á√ïES", f"{kpis_basicos['num_transacoes']:,}")
            
            with col6:
                st.metric("üé´ TICKET M√âDIO", f"R$ {kpis_basicos['ticket_medio']:,.2f}")
            
            # ========== SECTION 2: KPIs FINANCEIROS AVAN√áADOS ==========
            st.markdown('<div class="section-header">üéØ KPIs FINANCEIROS AVAN√áADOS</div>', unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="advanced-kpi">
                    <h3>üìà ROI</h3>
                    <h2>{kpis_avancados['roi']:.1f}%</h2>
                    <small>Return on Investment</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="advanced-kpi">
                    <h3>‚öñÔ∏è PONTO DE EQUIL√çBRIO</h3>
                    <h2>R$ {kpis_avancados['ponto_equilibrio']:,.2f}</h2>
                    <small>Break-even Point</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="advanced-kpi">
                    <h3>üíº FLUXO DE CAIXA</h3>
                    <h2>R$ {kpis_avancados['fluxo_caixa_operacional']:,.2f}</h2>
                    <small>Operational Cash Flow</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                st.markdown(f"""
                <div class="advanced-kpi">
                    <h3>üîÑ CICLO DE CAIXA</h3>
                    <h2>{kpis_avancados['ciclo_conversao_caixa']} dias</h2>
                    <small>Cash Conversion Cycle</small>
                </div>
                """, unsafe_allow_html=True)
            
            # Margem de Contribui√ß√£o
            st.markdown(f"""
            <div class="advanced-kpi">
                <h3>üìä MARGEM DE CONTRIBUI√á√ÉO</h3>
                <h2>{kpis_avancados['margem_contribuicao']:.1f}%</h2>
                <small>Contribui√ß√£o Marginal</small>
            </div>
            """, unsafe_allow_html=True)
            
            # ========== SECTION 3: ALERTAS E RECOMENDA√á√ïES ==========
            st.markdown('<div class="section-header">‚ö†Ô∏è ALERTAS E RECOMENDA√á√ïES</div>', unsafe_allow_html=True)
            
            alertas = gerar_alertas(kpis_basicos, kpis_avancados, tendencias)
            
            for alerta in alertas:
                if alerta["tipo"] == "critical":
                    st.markdown(f'<div class="alert-critical">{alerta["mensagem"]}</div>', unsafe_allow_html=True)
                elif alerta["tipo"] == "warning":
                    st.markdown(f'<div class="alert-warning">{alerta["mensagem"]}</div>', unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="alert-success">{alerta["mensagem"]}</div>', unsafe_allow_html=True)
            
            # ========== SECTION 4: AN√ÅLISE DE GARGALOS ==========
            st.markdown('<div class="section-header">üîç AN√ÅLISE DE GARGALOS</div>', unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üí∞ TOP RECEITAS")
                if not kpis_basicos['top_subcategorias_receita'].empty:
                    fig_receitas = px.bar(
                        kpis_basicos['top_subcategorias_receita'].reset_index(),
                        x='Valor',
                        y='Subcategoria',
                        orientation='h',
                        color='Valor',
                        color_continuous_scale='Viridis',
                        title='Principais Fontes de Receita'
                    )
                    fig_receitas.update_layout(height=400)
                    st.plotly_chart(fig_receitas, use_container_width=True)
                else:
                    st.info("Nenhuma receita encontrada")
            
            with col2:
                st.subheader("üí∏ TOP DESPESAS")
                if not kpis_basicos['top_subcategorias_despesa'].empty:
                    fig_despesas = px.bar(
                        kpis_basicos['top_subcategorias_despesa'].reset_index(),
                        x='Valor',
                        y='Subcategoria',
                        orientation='h',
                        color='Valor',
                        color_continuous_scale='Reds',
                        title='Maiores Gastos'
                    )
                    fig_despesas.update_layout(height=400)
                    st.plotly_chart(fig_despesas, use_container_width=True)
                else:
                    st.info("Nenhuma despesa encontrada")
            
            # ========== SECTION 5: EVOLU√á√ÉO TEMPORAL ==========
            st.markdown('<div class="section-header">üìà EVOLU√á√ÉO TEMPORAL</div>', unsafe_allow_html=True)
            
            if 'M√™s' in df.columns:
                evolucao_mensal = df.groupby(['M√™s', 'Tipo'])['Valor'].sum().reset_index()
                
                if not evolucao_mensal.empty:
                    fig_evolucao = px.bar(
                        evolucao_mensal,
                        x='M√™s',
                        y='Valor',
                        color='Tipo',
                        title='Evolu√ß√£o Mensal - Receitas vs Despesas',
                        barmode='group',
                        color_discrete_map={'Receita': '#2ecc71', 'Despesa': '#e74c3c'}
                    )
                    fig_evolucao.update_layout(height=400)
                    st.plotly_chart(fig_evolucao, use_container_width=True)
            
            # ========== SECTION 6: AN√ÅLISE DE SAZONALIDADE ==========
            st.markdown('<div class="section-header">üìÖ AN√ÅLISE DE SAZONALIDADE</div>', unsafe_allow_html=True)
            
            if 'M√™s' in df.columns:
                # An√°lise por m√™s
                receitas_mensais = df[df['Tipo'] == 'Receita'].groupby('M√™s')['Valor'].sum()
                despesas_mensais = df[df['Tipo'] == 'Despesa'].groupby('M√™s')['Valor'].sum()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìä Receitas Mensais")
                    if not receitas_mensais.empty:
                        fig_receitas_mensais = px.line(
                            receitas_mensais.reset_index(),
                            x='M√™s',
                            y='Valor',
                            title='Evolu√ß√£o das Receitas Mensais',
                            markers=True
                        )
                        st.plotly_chart(fig_receitas_mensais, use_container_width=True)
                
                with col2:
                    st.subheader("üìä Despesas Mensais")
                    if not despesas_mensais.empty:
                        fig_despesas_mensais = px.line(
                            despesas_mensais.reset_index(),
                            x='M√™s',
                            y='Valor',
                            title='Evolu√ß√£o das Despesas Mensais',
                            markers=True,
                            color_discrete_sequence=['red']
                        )
                        st.plotly_chart(fig_despesas_mensais, use_container_width=True)
                
                # An√°lise por dia da semana - CORRIGIDO para portugu√™s
                if 'Dia da Semana' in df.columns:
                    st.subheader("üìÖ Movimento por Dia da Semana")
                    # Ordem correta dos dias da semana em portugu√™s
                    ordem_dias = ['Segunda-feira', 'Ter√ßa-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S√°bado', 'Domingo']
                    movimento_diario = df.groupby('Dia da Semana')['Valor'].sum().reindex(ordem_dias, fill_value=0)
                    
                    fig_dias = px.bar(
                        movimento_diario.reset_index(),
                        x='Dia da Semana',
                        y='Valor',
                        title='Movimento Financeiro por Dia da Semana',
                        color='Valor',
                        color_continuous_scale='Blues'
                    )
                    st.plotly_chart(fig_dias, use_container_width=True)
            
            # ========== SECTION 7: DISTRIBUI√á√ÉO POR SUBCATEGORIA ==========
            st.markdown('<div class="section-header">üìä DISTRIBUI√á√ÉO POR SUBCATEGORIA</div>', unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üí∞ Receitas por Subcategoria")
                if not kpis_basicos['receitas_por_subcategoria'].empty:
                    # Limitar para mostrar apenas as top 10 subcategorias para melhor visualiza√ß√£o
                    top_receitas = kpis_basicos['receitas_por_subcategoria'].nlargest(10)
                    fig_receitas_sub = px.pie(
                        top_receitas.reset_index(),
                        values='Valor',
                        names='Subcategoria',
                        title='Distribui√ß√£o de Receitas por Subcategoria (Top 10)'
                    )
                    st.plotly_chart(fig_receitas_sub, use_container_width=True)
                else:
                    st.info("Nenhuma receita encontrada por subcategoria")
            
            with col2:
                st.subheader("üí∏ Despesas por Subcategoria")
                if not kpis_basicos['despesas_por_subcategoria'].empty:
                    # Limitar para mostrar apenas as top 10 subcategorias para melhor visualiza√ß√£o
                    top_despesas = kpis_basicos['despesas_por_subcategoria'].nlargest(10)
                    fig_despesas_sub = px.pie(
                        top_despesas.reset_index(),
                        values='Valor',
                        names='Subcategoria',
                        title='Distribui√ß√£o de Despesas por Subcategoria (Top 10)'
                    )
                    st.plotly_chart(fig_despesas_sub, use_container_width=True)
                else:
                    st.info("Nenhuma despesa encontrada por subcategoria")
            
            # ========== SECTION 8: DOWNLOAD DO RELAT√ìRIO ==========
            st.markdown('<div class="section-header">üíæ EXPORTAR RELAT√ìRIO</div>', unsafe_allow_html=True)
            
            if not company_name:
                st.warning("‚ö†Ô∏è Por favor, digite o nome da empresa na barra lateral para gerar o relat√≥rio PDF.")
            
            if st.button("üìÑ GERAR RELAT√ìRIO COMPLETO (PDF)", type="primary", use_container_width=True, disabled=not company_name):
                with st.spinner("Gerando relat√≥rio PDF..."):
                    with tempfile.TemporaryDirectory() as temp_dir:
                        try:
                            pdf_path = gerar_relatorio_pdf(df, kpis_basicos, kpis_avancados, tendencias, company_name, temp_dir)
                            nome_arquivo = f"relatorio_financeiro_{company_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
                            
                            href = criar_link_download_pdf(pdf_path, nome_arquivo)
                            st.markdown(href, unsafe_allow_html=True)
                            st.success("‚úÖ Relat√≥rio PDF gerado com sucesso!")
                            
                        except Exception as e:
                            st.error(f"‚ùå Erro ao gerar PDF: {str(e)}")
        
        except Exception as e:
            st.error(f"‚ùå Erro ao processar o arquivo: {str(e)}")
            st.info("""
            **üìã FORMATO ESPERADO DO CSV:**
            - Data (DD/MM/AAAA)
            - Categoria (Texto)
            - Subcategoria (Texto) 
            - Tipo (Receita/Despesa)
            - Valor (N√∫mero)
            - Cliente (Opcional)
            """)
    
    else:
        st.info("""
        ## üëã BEM-VINDO AO DASHBOARD FINANCEIRO!
        
        **üìã COMO USAR:**
        1. **Gere o CSV** usando o Consolidador de Fluxo de Caixa
        2. **Fa√ßa upload** do arquivo CSV na barra lateral
        3. **Digite o nome da empresa** para personalizar o relat√≥rio
        4. **Explore os dados** com os filtros dispon√≠veis
        5. **Analise os KPIs** automaticamente
        6. **Gere relat√≥rio PDF** completo com gr√°ficos
        
        **üéØ O QUE VOC√ä VAI ENCONTRAR:**
        - üìà KPIs financeiros essenciais e avan√ßados
        - üîç An√°lise de gargalos por subcategoria  
        - üìä Gr√°ficos interativos profissionais
        - üìÖ An√°lise de sazonalidade e tend√™ncias
        - ‚ö†Ô∏è Alertas e recomenda√ß√µes autom√°ticas
        - üìÑ Relat√≥rios PDF completos COM GR√ÅFICOS
        
        **üìä FUNCIONALIDADES:**
        - ‚úÖ Personaliza√ß√£o com nome da empresa
        - ‚úÖ Gr√°ficos inclu√≠dos no PDF
        - ‚úÖ Valida√ß√£o robusta de dados
        - ‚úÖ C√°lculos de KPIs mais realistas
        - ‚úÖ An√°lise de tend√™ncias avan√ßada
        - ‚úÖ Sistema de alertas inteligentes
        - ‚úÖ An√°lise de sazonalidade
        - ‚úÖ Performance otimizada com cache
        - ‚úÖ An√°lise detalhada por SUBCATEGORIA
        """)

if __name__ == "__main__":
    main()